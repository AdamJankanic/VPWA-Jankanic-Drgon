/// <reference types="@adonisjs/application/build/adonis-typings" />
import type { ApplicationContract } from '@ioc:Adonis/Core/Application';
import type { WsContextContract } from '@ioc:Ruby184/Socket.IO/WsContext';
import type { WsErrorResponse } from '@ioc:Ruby184/Socket.IO/WsExceptionHandler';
/**
 * Ws exception handler serves as the base exception handler
 * to handle all exceptions occured during the WS connection
 * lifecycle and makes appropriate response for them.
 */
export declare abstract class WsExceptionHandler {
    protected app: ApplicationContract;
    /**
     * An array of error codes that must not be reported
     */
    protected ignoreCodes: string[];
    /**
     * An array of http statuses that must not be reported. The first
     * level of filteration is on the basis of statuses and then
     * the error codes.
     */
    protected ignoreStatuses: number[];
    /**
     * An array of internal error codes to ignore
     * from the reporting list
     */
    protected internalIgnoreCodes: string[];
    constructor(app: ApplicationContract);
    /**
     * A custom context to send to the logger when reporting
     * errors.
     */
    protected context(_: WsContextContract): any;
    /**
     * Returns a boolean telling if a given error is supposed
     * to be logged or not
     */
    protected shouldReport(error: any): boolean;
    /**
     * Makes the response, based upon the environment in which the app is runing
     */
    protected makeResponse(error: any, _: WsContextContract): Promise<WsErrorResponse>;
    /**
     * Report a given error
     */
    report(error: any, ctx: WsContextContract): void;
    /**
     * Handle exception and make response
     */
    handle(error: any, ctx: WsContextContract): Promise<WsErrorResponse>;
}
