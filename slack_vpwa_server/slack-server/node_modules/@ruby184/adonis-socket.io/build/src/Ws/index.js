"use strict";
/*
 * @ruby184/adonis-socket.io
 *
 * (c) Ľubomír "Ruby" Jesze <lubomir.j184@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsServer = void 0;
const socket_io_1 = require("socket.io");
const WsNamespace_1 = require("./WsNamespace");
const Store_1 = require("./Store");
const MiddlewareStore_1 = require("../MiddlewareStore");
const PreCompiler_1 = require("./PreCompiler");
const HandlerExecutor_1 = require("./HandlerExecutor");
const helpers_1 = require("@poppinss/utils/build/helpers");
/**
 * WsServer class handles the wiring of socket.io Server with adonis core
 * to allow definition of namespaces in adonis-like style.
 */
class WsServer {
    constructor(application, socketConfig) {
        this.application = application;
        this.socketConfig = socketConfig;
        /**
         * Global matchers to test namespace params against regular expressions.
         */
        this.paramMatchers = {};
        /**
         * Flag to know if instance is attached to http server.
         */
        this.attached = false;
        /**
         * Reference to the original socket.io server
         */
        this.io = new socket_io_1.Server();
        /**
         * The middleware store to register global and named middleware
         */
        this.middleware = new MiddlewareStore_1.MiddlewareStore(this.application.container);
        /**
         * Currently defined namespaces keyed by pattern
         */
        this.namespaces = {};
        /**
         * Store to register tokenized namespaces
         */
        this.store = new Store_1.Store();
        /**
         * Precompiler to set compiled handlers and middlewares to namespaces
         */
        this.precompiler = new PreCompiler_1.PreCompiler(this.application.container, this.middleware);
        /**
         * Executor wires together all the pieces to attach the namespaces to socket.io
         * and execute handlers defined for namespaces with created instance of WsContext.
         */
        this.executor = new HandlerExecutor_1.HandlerExecutor(this.application, this.precompiler, this.store, this.io);
        /**
         * Exposing WsNamespace and NamespaceMatchers constructors to be extended from outside
         */
        this.WsNamespace = WsNamespace_1.WsNamespace;
        this.NamespaceMatchers = this.getNamespaceMatchersClass();
        /**
         * Shortcut methods for commonly used matchers (extending the route matchers from adonis router)
         */
        this.matchers = new this.NamespaceMatchers();
    }
    /**
     * Get class for matchers by extending the RouteMatchers class from adonis http-server package
     * so the extended matchers are also reflected to our class but can also be extended separately.
     */
    getNamespaceMatchersClass() {
        var _a;
        const Route = this.application.container.resolveBinding('Adonis/Core/Route');
        const RouteMatchers = Route.RouteMatchers;
        return _a = class NamespaceMatchers extends RouteMatchers {
            },
            _a.macros = {},
            _a.getters = {},
            _a;
    }
    /**
     * Define global route matcher
     */
    where(param, matcher) {
        if (typeof matcher === 'string') {
            this.paramMatchers[param] = { match: new RegExp(matcher) };
        }
        else if (helpers_1.types.isRegexp(matcher)) {
            this.paramMatchers[param] = { match: matcher };
        }
        else {
            this.paramMatchers[param] = matcher;
        }
        return this;
    }
    /**
     * Define a namespace with given name or pattern
     */
    namespace(pattern) {
        const nsp = WsNamespace_1.WsNamespace.normalize(pattern);
        if (!this.namespaces[nsp]) {
            this.namespaces[nsp] = new WsNamespace_1.WsNamespace(nsp, this.paramMatchers);
        }
        return this.namespaces[nsp];
    }
    /**
     * Commit namespaces to the store. After this, no more namespaces can be registered.
     */
    commit() {
        Object.values(this.namespaces).forEach((namespace) => {
            const nsp = namespace.toJSON();
            this.precompiler.compileNamespace(nsp);
            this.store.add(nsp);
        });
        this.namespaces = {};
    }
    async attach() {
        this.commit();
        this.attached = this.executor.attach(this.socketConfig, this.application.rcFile.raw.wsExceptionHandlerNamespace);
    }
    async close() {
        if (!this.attached) {
            return;
        }
        return new Promise((resolve, reject) => {
            this.io.close((err) => (err ? reject(err) : resolve()));
        });
    }
}
exports.WsServer = WsServer;
