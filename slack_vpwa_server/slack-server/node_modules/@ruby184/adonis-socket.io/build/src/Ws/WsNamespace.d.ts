import type { ConnectHandler, DisconnectHandler, EventHandler, NamespaceJSON, NamespaceMatchersNode, NamespaceMiddlewareHandler, NamespaceParamMatcher, WsNamespaceContract } from '@ioc:Ruby184/Socket.IO/Ws';
import { Macroable } from 'macroable';
export declare class WsNamespace extends Macroable implements WsNamespaceContract {
    private pattern;
    private globalMatchers;
    protected static macros: {};
    protected static getters: {};
    /**
     * An object of matchers to be forwarded to the
     * store. The matchers list is populated by
     * calling `where` method
     */
    private matchers;
    private handlers;
    /**
     * An array of middlewares. Added using `middleware` function
     */
    private middlewares;
    /**
     * Storing the namespace explicitly set using `namespace` method
     */
    private controllerNamespace;
    constructor(pattern: string, globalMatchers: NamespaceMatchersNode);
    static normalize(ns: string): string;
    /**
     * Returns an object of param matchers by merging global and local
     * matchers. The local copy is given preference over the global
     * one's
     */
    private getMatchers;
    private addHandler;
    where(param: string, matcher: NamespaceParamMatcher): this;
    /**
     * Define controller namespace for a given route
     */
    namespace(namespace: string): this;
    on(event: string, handler: EventHandler): this;
    middleware(middleware: NamespaceMiddlewareHandler | NamespaceMiddlewareHandler[]): this;
    connected(handler: ConnectHandler): this;
    disconnecting(handler: DisconnectHandler): this;
    disconnected(handler: DisconnectHandler): this;
    toJSON(): NamespaceJSON;
}
