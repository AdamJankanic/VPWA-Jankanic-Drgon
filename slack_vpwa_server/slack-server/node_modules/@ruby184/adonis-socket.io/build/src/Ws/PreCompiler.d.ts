import type { NamespaceJSON } from '@ioc:Ruby184/Socket.IO/Ws';
import type { WsContextContract } from '@ioc:Ruby184/Socket.IO/WsContext';
import type { WsMiddlewareStoreContract } from '@ioc:Ruby184/Socket.IO/MiddlewareStore';
import type { IocContract } from '@ioc:Adonis/Core/Application';
export declare class PreCompiler {
    private middlewareStore;
    /**
     * The resolver used to resolve the controllers from IoC container
     */
    private resolver;
    /**
     * Method to execute middleware using the middleware store
     */
    private executeMiddleware;
    /**
     * Method to execute handler for connection, disconnect or disconnecting events
     */
    runConnectionHandler: (event: 'connection' | 'disconnect' | 'disconnecting', ctx: WsContextContract, reason?: any) => any;
    constructor(container: IocContract, middlewareStore: WsMiddlewareStoreContract);
    private compileHandlers;
    private compileMiddleware;
    compileNamespace(nsp: NamespaceJSON): void;
    /**
     * Method to run middleware chain for given namespace
     */
    runNamespaceMiddleware(ctx: WsContextContract): Promise<void>;
    /**
     * Method to run event handler with given args
     */
    runEventHandler(event: string, ctx: WsContextContract, args: any[]): Promise<any>;
}
