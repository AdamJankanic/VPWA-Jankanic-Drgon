/// <reference types="@adonisjs/application/build/adonis-typings" />
import type { ApplicationContract } from '@ioc:Adonis/Core/Application';
import type { WsContract, WsConfig, NamespaceParamMatcher, NamespaceMatchersConstructorContract, NamespaceMatchersContract } from '@ioc:Ruby184/Socket.IO/Ws';
import { Server as IoServer } from 'socket.io';
import { WsNamespace } from './WsNamespace';
import { MiddlewareStore } from '../MiddlewareStore';
/**
 * WsServer class handles the wiring of socket.io Server with adonis core
 * to allow definition of namespaces in adonis-like style.
 */
export declare class WsServer implements WsContract {
    private application;
    private socketConfig;
    /**
     * Global matchers to test namespace params against regular expressions.
     */
    private paramMatchers;
    /**
     * Flag to know if instance is attached to http server.
     */
    private attached;
    /**
     * Reference to the original socket.io server
     */
    io: IoServer<import("socket.io/dist/typed-events").DefaultEventsMap, import("socket.io/dist/typed-events").DefaultEventsMap, import("socket.io/dist/typed-events").DefaultEventsMap, any>;
    /**
     * The middleware store to register global and named middleware
     */
    middleware: MiddlewareStore;
    /**
     * Currently defined namespaces keyed by pattern
     */
    namespaces: {
        [pattern: string]: WsNamespace;
    };
    /**
     * Store to register tokenized namespaces
     */
    private store;
    /**
     * Precompiler to set compiled handlers and middlewares to namespaces
     */
    private precompiler;
    /**
     * Executor wires together all the pieces to attach the namespaces to socket.io
     * and execute handlers defined for namespaces with created instance of WsContext.
     */
    private executor;
    /**
     * Exposing WsNamespace and NamespaceMatchers constructors to be extended from outside
     */
    WsNamespace: typeof WsNamespace;
    NamespaceMatchers: NamespaceMatchersConstructorContract;
    /**
     * Shortcut methods for commonly used matchers (extending the route matchers from adonis router)
     */
    matchers: NamespaceMatchersContract;
    constructor(application: ApplicationContract, socketConfig: WsConfig);
    /**
     * Get class for matchers by extending the RouteMatchers class from adonis http-server package
     * so the extended matchers are also reflected to our class but can also be extended separately.
     */
    private getNamespaceMatchersClass;
    /**
     * Define global route matcher
     */
    where(param: string, matcher: NamespaceParamMatcher): this;
    /**
     * Define a namespace with given name or pattern
     */
    namespace(pattern: string): WsNamespace;
    /**
     * Commit namespaces to the store. After this, no more namespaces can be registered.
     */
    commit(): void;
    attach(): Promise<void>;
    close(): Promise<void>;
}
