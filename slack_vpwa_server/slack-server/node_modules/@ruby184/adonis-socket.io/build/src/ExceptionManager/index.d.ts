import type { IocContract } from '@ioc:Adonis/Core/Application';
import type { ErrorHandler } from '@ioc:Ruby184/Socket.IO/Ws';
import type { WsContextContract } from '@ioc:Ruby184/Socket.IO/WsContext';
import type { WsErrorResponse } from '@ioc:Ruby184/Socket.IO/WsExceptionHandler';
/**
 * Exception manager exposes the API to register custom error handler
 * and invoke it when exceptions are raised during the WS lifecycle.
 */
export declare class ExceptionManager {
    /**
     * Resolved copy of error handler
     */
    private resolvedErrorHandler?;
    /**
     * Resolved copy of error reporter
     */
    private resolvedErrorReporter?;
    /**
     * A reference to ioc resolver to resolve the error handler from
     * the IoC container
     */
    private resolver;
    constructor(container: IocContract);
    /**
     * Register a custom error handler
     */
    registerHandler(handler: ErrorHandler): void;
    /**
     * Serialize error to response object which is send to client
     */
    private serializeError;
    /**
     * Handle error
     */
    private handleError;
    /**
     * Report error when report method exists
     */
    private reportError;
    /**
     * Handle the error
     */
    handle(error: any, ctx: WsContextContract): Promise<WsErrorResponse>;
}
