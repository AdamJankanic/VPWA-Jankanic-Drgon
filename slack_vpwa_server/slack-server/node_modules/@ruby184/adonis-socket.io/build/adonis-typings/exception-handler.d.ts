/// <reference types="@adonisjs/application/build/adonis-typings" />
declare module '@ioc:Ruby184/Socket.IO/WsExceptionHandler' {
    import { ApplicationContract } from '@ioc:Adonis/Core/Application';
    import { WsContextContract } from '@ioc:Ruby184/Socket.IO/WsContext';
    interface WsErrorResponse extends Error {
        data?: Partial<{
            status: number;
            code: string;
            stack: string;
            [prop: string]: any;
        }>;
    }
    interface WsExceptionHandlerContract {
        report(error: any, ctx: WsContextContract): void;
        handle(error: any, ctx: WsContextContract): Promise<WsErrorResponse>;
    }
    export default abstract class WsExceptionHandler implements WsExceptionHandlerContract {
        constructor(app: ApplicationContract);
        protected app: ApplicationContract;
        protected ignoreCodes: string[];
        protected ignoreStatuses: number[];
        protected internalIgnoreCodes: string[];
        protected context(ctx: WsContextContract): any;
        protected shouldReport(error: any): boolean;
        protected makeResponse(error: any, ctx: WsContextContract): Promise<WsErrorResponse>;
        report(error: any, ctx: WsContextContract): void;
        handle(error: any, ctx: WsContextContract): Promise<WsErrorResponse>;
    }
}
